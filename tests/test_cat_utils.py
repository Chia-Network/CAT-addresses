from chia.types.blockchain_format.coin import Coin
from chia.types.blockchain_format.program import Program
from chia.types.blockchain_format.sized_bytes import bytes32
from chia.types.coin_spend import CoinSpend
from chia.util.ints import uint64
from src.cat_utils import extract_cat


def test_extract_cat_from_cat_coin_spend():
    parent_coin_info = bytes32.fromhex("8e17d2cfe14fd6a0d84c75d75d3420f03bdf915b17ccb7217a923367e4185270")
    # real CAT spend taken from mainnet
    cat_outer_puzzle = Program.fromhex("ff02ffff01ff02ffff01ff02ff5effff04ff02ffff04ffff04ff05ffff04ffff0bff2cff0580ffff04ff0bff80808080ffff04ffff02ff17ff2f80ffff04ff5fffff04ffff02ff2effff04ff02ffff04ff17ff80808080ffff04ffff0bff82027fff82057fff820b7f80ffff04ff81bfffff04ff82017fffff04ff8202ffffff04ff8205ffffff04ff820bffff80808080808080808080808080ffff04ffff01ffffffff81ca3dff46ff0233ffff3c04ff01ff0181cbffffff02ff02ffff03ff05ffff01ff02ff32ffff04ff02ffff04ff0dffff04ffff0bff22ffff0bff2cff3480ffff0bff22ffff0bff22ffff0bff2cff5c80ff0980ffff0bff22ff0bffff0bff2cff8080808080ff8080808080ffff010b80ff0180ffff02ffff03ff0bffff01ff02ffff03ffff09ffff02ff2effff04ff02ffff04ff13ff80808080ff820b9f80ffff01ff02ff26ffff04ff02ffff04ffff02ff13ffff04ff5fffff04ff17ffff04ff2fffff04ff81bfffff04ff82017fffff04ff1bff8080808080808080ffff04ff82017fff8080808080ffff01ff088080ff0180ffff01ff02ffff03ff17ffff01ff02ffff03ffff20ff81bf80ffff0182017fffff01ff088080ff0180ffff01ff088080ff018080ff0180ffff04ffff04ff05ff2780ffff04ffff10ff0bff5780ff778080ff02ffff03ff05ffff01ff02ffff03ffff09ffff02ffff03ffff09ff11ff7880ffff0159ff8080ff0180ffff01818f80ffff01ff02ff7affff04ff02ffff04ff0dffff04ff0bffff04ffff04ff81b9ff82017980ff808080808080ffff01ff02ff5affff04ff02ffff04ffff02ffff03ffff09ff11ff7880ffff01ff04ff78ffff04ffff02ff36ffff04ff02ffff04ff13ffff04ff29ffff04ffff0bff2cff5b80ffff04ff2bff80808080808080ff398080ffff01ff02ffff03ffff09ff11ff2480ffff01ff04ff24ffff04ffff0bff20ff2980ff398080ffff010980ff018080ff0180ffff04ffff02ffff03ffff09ff11ff7880ffff0159ff8080ff0180ffff04ffff02ff7affff04ff02ffff04ff0dffff04ff0bffff04ff17ff808080808080ff80808080808080ff0180ffff01ff04ff80ffff04ff80ff17808080ff0180ffffff02ffff03ff05ffff01ff04ff09ffff02ff26ffff04ff02ffff04ff0dffff04ff0bff808080808080ffff010b80ff0180ff0bff22ffff0bff2cff5880ffff0bff22ffff0bff22ffff0bff2cff5c80ff0580ffff0bff22ffff02ff32ffff04ff02ffff04ff07ffff04ffff0bff2cff2c80ff8080808080ffff0bff2cff8080808080ffff02ffff03ffff07ff0580ffff01ff0bffff0102ffff02ff2effff04ff02ffff04ff09ff80808080ffff02ff2effff04ff02ffff04ff0dff8080808080ffff01ff0bff2cff058080ff0180ffff04ffff04ff28ffff04ff5fff808080ffff02ff7effff04ff02ffff04ffff04ffff04ff2fff0580ffff04ff5fff82017f8080ffff04ffff02ff7affff04ff02ffff04ff0bffff04ff05ffff01ff808080808080ffff04ff17ffff04ff81bfffff04ff82017fffff04ffff0bff8204ffffff02ff36ffff04ff02ffff04ff09ffff04ff820affffff04ffff0bff2cff2d80ffff04ff15ff80808080808080ff8216ff80ffff04ff8205ffffff04ff820bffff808080808080808080808080ff02ff2affff04ff02ffff04ff5fffff04ff3bffff04ffff02ffff03ff17ffff01ff09ff2dffff0bff27ffff02ff36ffff04ff02ffff04ff29ffff04ff57ffff04ffff0bff2cff81b980ffff04ff59ff80808080808080ff81b78080ff8080ff0180ffff04ff17ffff04ff05ffff04ff8202ffffff04ffff04ffff04ff24ffff04ffff0bff7cff2fff82017f80ff808080ffff04ffff04ff30ffff04ffff0bff81bfffff0bff7cff15ffff10ff82017fffff11ff8202dfff2b80ff8202ff808080ff808080ff138080ff80808080808080808080ff018080ffff04ffff01a072dec062874cd4d3aab892a0906688a1ae412b0109982e1797a170add88bdcdcffff04ffff01a00f1804d8aa3899a03790000563deaca1d894ed0ab382d672660a8f251b0f4e9cffff04ffff01ff02ffff01ff02ffff01ff02ffff03ff0bffff01ff02ffff03ffff09ff05ffff1dff0bffff1effff0bff0bffff02ff06ffff04ff02ffff04ff17ff8080808080808080ffff01ff02ff17ff2f80ffff01ff088080ff0180ffff01ff04ffff04ff04ffff04ff05ffff04ffff02ff06ffff04ff02ffff04ff17ff80808080ff80808080ffff02ff17ff2f808080ff0180ffff04ffff01ff32ff02ffff03ffff07ff0580ffff01ff0bffff0102ffff02ff06ffff04ff02ffff04ff09ff80808080ffff02ff06ffff04ff02ffff04ff0dff8080808080ffff01ff0bffff0101ff058080ff0180ff018080ffff04ffff01b0b501ce55438610cb615cc44950f30dfcd9997a23c7d410476e967da6379de59cf794deb7451141ea24b92a018fb4450aff018080ff0180808080")
    cat_outer_solution = Program.fromhex("ffff80ffff01ffff33ffa074cfef3540138bf4a7f1d6625fb6f51efefa83ec15b6adc5f0d9057de7f39b8aff64ffffa074cfef3540138bf4a7f1d6625fb6f51efefa83ec15b6adc5f0d9057de7f39b8a8080ffff33ffa037e8e00dde02b625441b349e809a261fcddb8d1d852934410ac1b480efa3c34aff82106880ffff3cffa0e193d89af857bdc69db3cda544d907c5cbc2e8b69cf169dc5adcb3e21b43bb168080ff8080ffffa0bed72e2d53142ebfadfbf2cdbe61ff9c22fe872d2844e4f1e25df89e9f2a18c2ffa037e8e00dde02b625441b349e809a261fcddb8d1d852934410ac1b480efa3c34aff82113080ffa021adc4838c3ce0dbc4e6b6c20927177947c1dd4aa0664cafa7638397e48c8aefffffa08e17d2cfe14fd6a0d84c75d75d3420f03bdf915b17ccb7217a923367e4185270ffa0fb20d47b66b12ce5d9d620bb53dfdaeb090f384b9f7de74e845f3f074e793119ff8210cc80ffffa08e17d2cfe14fd6a0d84c75d75d3420f03bdf915b17ccb7217a923367e4185270ffa037e8e00dde02b625441b349e809a261fcddb8d1d852934410ac1b480efa3c34aff8210cc80ff80ff8080")

    coin_spend = CoinSpend(
        Coin(parent_coin_info, cat_outer_puzzle.get_tree_hash(), uint64(4300)),
        cat_outer_puzzle,
        cat_outer_solution
    )

    (
        tail_hash,
        outer_puzzle,
        outer_solution,
        inner_puzzle,
        inner_solution,
        create_coin_conditions
    ) = extract_cat(coin_spend)

    assert tail_hash == bytes32.fromhex("0f1804d8aa3899a03790000563deaca1d894ed0ab382d672660a8f251b0f4e9c")
    assert outer_puzzle == cat_outer_puzzle
    assert outer_solution == cat_outer_solution
    assert inner_solution == cat_outer_solution.first()
    assert create_coin_conditions == [
        Coin(
            bytes32.fromhex("21adc4838c3ce0dbc4e6b6c20927177947c1dd4aa0664cafa7638397e48c8aef"),
            bytes32.fromhex("74cfef3540138bf4a7f1d6625fb6f51efefa83ec15b6adc5f0d9057de7f39b8a"),
            uint64(100)
        ),
        Coin(
            bytes32.fromhex("21adc4838c3ce0dbc4e6b6c20927177947c1dd4aa0664cafa7638397e48c8aef"),
            bytes32.fromhex("37e8e00dde02b625441b349e809a261fcddb8d1d852934410ac1b480efa3c34a"),
            uint64(4200)
        )
    ]


def test_extract_cat_from_non_cat_coin_spend():
    parent_coin_info = bytes32.fromhex("0000000000000000000000000000000000000000000000000000000000000000")
    coin_spend = CoinSpend(
        Coin(parent_coin_info, Program.to([]).get_tree_hash(), uint64(4300)),
        Program.to([]),
        Program.to([])
    )

    result = extract_cat(coin_spend)

    assert result is None
